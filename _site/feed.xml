<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>decoder24</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 25 Feb 2022 20:13:19 +0800</pubDate>
    <lastBuildDate>Fri, 25 Feb 2022 20:13:19 +0800</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>一种简单模型</title>
        <description>&lt;h2 id=&quot;研究背景&quot;&gt;研究背景&lt;/h2&gt;

&lt;p&gt;现如今，随着人们生活质量的提高，大多数家庭都有了私家车，这也导致了城市拥堵现象的出现。为了及时发现交通拥堵的规律及其相关影响因素，对道路压力进行评估，L与G同学进行调研。&lt;/p&gt;

&lt;h2 id=&quot;研究过程&quot;&gt;研究过程&lt;/h2&gt;

&lt;p&gt;L与G同学来到某个商业中心点，观察其辐射范围内的道路拥堵情况，总结出与交通拥堵直接相关的多条因素，并将其抽象成数学模型，进行一定的定性和定量处理，与“图”的概念进行相应的拟合，总结出评估道路负载的方法。&lt;/p&gt;

&lt;h2 id=&quot;对影响城市道路负载因素的探索&quot;&gt;对影响城市道路负载因素的探索&lt;/h2&gt;

&lt;p&gt;道路负载$P$，$P$是一个相对数值，能够衡量不同道路所承受的压力大小。$P$同时也能表示车辆在通过该路段时的通行压力。&lt;/p&gt;

&lt;h3 id=&quot;相对流量&quot;&gt;相对流量&lt;/h3&gt;

&lt;p&gt;定义$Q$表示道路的&lt;strong&gt;相对流量&lt;/strong&gt;。对于车流量的衡量，我们采用一个相对值，具体见&lt;strong&gt;“相对流量的计算”&lt;/strong&gt;部分。&lt;/p&gt;

&lt;p&gt;认为车流量越大，道路的负载越大，道路负载与车流量成正比。&lt;/p&gt;

\[P \propto Q\]

&lt;h3 id=&quot;相对道路宽度&quot;&gt;相对道路宽度&lt;/h3&gt;

&lt;p&gt;对于道路的宽度$w$，我们仍使用一个&lt;strong&gt;相对数值&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;认为道路宽度越大，道路负载越小，道路的负载与道路宽度成反比。&lt;/p&gt;

\[P \propto \frac{1}{w}\]

&lt;blockquote&gt;
  &lt;p&gt;道路的相对宽度$w$按如下方法计算。&lt;/p&gt;

  &lt;p&gt;规定道路的实际宽度为$l$，单位为$m$。我们需要先计算 $\bar{l}$。&lt;/p&gt;

\[\bar{l} = l_1 +l_2 + l_3 + ... + l_n\]

  &lt;p&gt;根据$\bar{l}$进一步计算每一条路的相对宽度。&lt;/p&gt;

\[w_i = \frac{l_i}{\bar{l}}\]

&lt;/blockquote&gt;

&lt;p&gt;最终，有如下公式（其中$\bar{Q_{Absolute}}$在后文给出）：&lt;/p&gt;

\[P = \frac{Q}{w\cdot\bar{Q_{Absolute}}}\]

&lt;h2 id=&quot;在城市路网中流量的计算方法&quot;&gt;在城市路网中流量的计算方法&lt;/h2&gt;

&lt;h3 id=&quot;图的引入&quot;&gt;“图”的引入&lt;/h3&gt;

&lt;h4 id=&quot;图的概念&quot;&gt;“图”的概念&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;图&lt;/strong&gt;（Graph）是用于表示物体与物体之间存在某种关系的结构（图1）。数学抽象后的“物体”称作&lt;strong&gt;节点&lt;/strong&gt;或&lt;strong&gt;顶点&lt;/strong&gt;（英语：Vertex，node或point），节点间的相关关系则称作边。在描绘一张图的时候，通常用一组点或小圆圈表示节点，其间的边则使用直线或曲线。特别的，若为图中的每一条都规定方向，则称这张图为有向图；若不为图中的边规定方向，则称这张图为无向图。&lt;img src=&quot;/Users/lukealpha/Downloads/graph.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    图1
&lt;/p&gt;

&lt;p&gt;在这里我们将城市路网抽象为一张“无向图”。将图中的&lt;strong&gt;节点&lt;/strong&gt;定义为城市中可以访问的重要节点（如公共场所），在城市节点之间有通路相连，使得不同的城市节点之间可以&lt;strong&gt;相互到达&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;图中的简单路径&quot;&gt;“图”中的“简单路径”&lt;/h4&gt;

&lt;p&gt;一个图中一条路径（path）是一个顶点序列，使得从它的每个顶点有一条边到该序列中下一顶点。有限路径有一个最先顶点，称为起点，和最后顶点，称为末点。两者都成为这条路径的端点。路径中其它顶点成为内点。一个环是起点与末点相同的路径。注意到一个环中起点的选取是任意的。&lt;/p&gt;

&lt;p&gt;我们称一条不是环的路径，以及起点和终点相同但路径总长为 $0$ 的路径“简单路径”。&lt;/p&gt;

&lt;h4 id=&quot;图中的关键路径&quot;&gt;“图”中的关键路径&lt;/h4&gt;

&lt;p&gt;从图中选取一条边，将该边从图中删除。若删除后，整个图无法保持原有的连通性，那么称这条边为该图的关键路径。&lt;/p&gt;

&lt;h4 id=&quot;图中的非关键路径&quot;&gt;“图”中的非关键路径&lt;/h4&gt;

&lt;p&gt;类似的，从图中选取一条边，将该边从图中删除。若删除后，整个图仍能保持原有的连通性，那么称这条边为该图的非关键路径。&lt;/p&gt;

&lt;h3 id=&quot;相对流量的计算&quot;&gt;相对流量的计算&lt;/h3&gt;

&lt;h4 id=&quot;绝对流量的计算&quot;&gt;“绝对流量”的计算&lt;/h4&gt;

&lt;p&gt;为了简化模型的复杂度，我们可以先引入“绝对流量”的概念。“绝对流量”$Q_{Absolute}$按照如下方法计算。&lt;/p&gt;

&lt;p&gt;现以下图（图2）作为范例研究，研究这条边的“绝对流量”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/graph1.png&quot; alt=&quot;graph1&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  图2
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“结构性流量” $Q_1$&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;由路网结构产生的流量，我们称为“结构性流量”，记为 $Q_1$。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;对于关键路径&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;规定通过一条边的简单路径数为该边的“结构性流量”。以“5–3”连边为例（图3），其“结构性流量”为20。&lt;/p&gt;

        &lt;p&gt;为了方便计算，也可以使用如下转化。在使用计算机程序进行“绝对流量”的计算，该转化可利于设计计算复杂度更低的算法。&lt;/p&gt;

        &lt;blockquote&gt;
          &lt;p&gt;通过一条路径的简单路径数为以该路径两端点为起点的、不经过该边的简单路径数的乘积。&lt;/p&gt;

\[Q_{1,AB} = Q_{1,A} \times Q_{1,B}\]

        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;对于非关键路径&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;规定除该边以外的连接该边两端点的简单路径数的相反数为该边的“结构性流量”。以“6–10”连边为例（图3），其“结构性流量”为-3。&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/graph_annotated.png&quot; alt=&quot;graph_annotated&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p align=&quot;center&quot;&gt;
  图3
&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“热度流量”$Q_2$&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;由于节点热度产生的流量，我们称为“热度流量”，记为$Q_2$。&lt;/p&gt;

    &lt;p&gt;模型在实际使用中，可以为节点设定热度参数，记为$k_{h}$ ($k_{h} \in \Z$)。生活中，不同的节点常常有不同的热度。购物中心、学校、医院等场所通常拥有较高的热度，他们会给周边道路产生额外的“热度流量”。&lt;/p&gt;

    &lt;p&gt;热度参数的设定需要经过不断微调，最终目标仍是使不同场所间的热度参数所成的比例与真实热度所成的比例相同。&lt;/p&gt;

    &lt;p&gt;一个热度参数为$k_{h}$ 的节点会为与其直接连的边带来$k_h$的“热度流量”，为与其间接连接的次级边带来$k_h-1$的“热度流量”，为与其间接连接的更次级边带来$k_h-2$的“热度流量”，……以此类推，直到产生的“热度流量”变为$0$。特别的，在环中，一条边可能产生多个“热度流量”。&lt;/p&gt;

    &lt;p&gt;仍以上述图网为例，若设6、4、1号节点的$k_h$分别为2，3，1，则各条边“热度流量”如下（图4）：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/graph_hotspot.png&quot; alt=&quot;graph_hotspot&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
  图4
&lt;/p&gt;

&lt;p&gt;根据“结构性流量”和“热度流量”，我们最终能够得到这条边的“绝对流量”。
\(Q_{Absolute} = Q_1+Q_2\)&lt;/p&gt;

&lt;h4 id=&quot;绝对流量的转化&quot;&gt;“绝对流量”的转化&lt;/h4&gt;

&lt;p&gt;在实际生活中，考虑到流量不会变得无限大，因此需要将“绝对流量”进行转化。&lt;/p&gt;

&lt;p&gt;这里引入Sigmoid函数。定义如下：
\(Sigmoid(x) = \frac{1}{1+e^{-x}}\)
其函数图像如下（图5）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/Sigmoid.jpg&quot; alt=&quot;Sigmoid&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    图5
&lt;/p&gt;

&lt;p&gt;若路网中边的总数为$n$，计算路网中所有边产生的“绝对流量”的平均值：&lt;/p&gt;

\[\bar{Q_{Absolute}} = \frac{Q_1+Q_2+Q_3+...+Q_n}{n}\]

&lt;p&gt;一条边的相对流量$Q$按如下方法计算：&lt;/p&gt;

\[Q = Sigmoid(\frac{Q_{Absolute}}{\bar{Q_{Absolute}}})\times100\]

&lt;p&gt;这样，所有的相对流量$Q$均为范围在$(0,100)$的数值，效果如下（图6）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/graph_qabsolute.png&quot; alt=&quot;graph_qabsolute&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
 图6
&lt;/p&gt;

&lt;h2 id=&quot;示例模型&quot;&gt;示例模型&lt;/h2&gt;

&lt;h3 id=&quot;示例数据&quot;&gt;示例数据&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;相对流量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/graph_qabsolute.png&quot; alt=&quot;graph_qabsolute&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;相对道路宽度&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/graph_w.png&quot; alt=&quot;graph_w&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;模型结果&quot;&gt;模型结果&lt;/h3&gt;

&lt;p&gt;根据公式$P = \frac{Q}{w\cdot\bar{Q_{Absolute}}}$，最终得到的道路压力值如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Users/lukealpha/Downloads/Pressure_results.png&quot; alt=&quot;Pressure_results&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;该模型能够一定程度上评估城市道路的道路压力，对于道路压力较大的城市路段，可以采取引流、道路拓宽、调整信号灯时间等多种方式，以达到降低道路负载，缓解交通压力的目的。&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Feb 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/02/19/model/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/02/19/model/</guid>
        
        
      </item>
    
      <item>
        <title>Hash相关</title>
        <description>&lt;h1 id=&quot;hash算法&quot;&gt;$Hash$算法&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hash 的核心思想在于，将输入映射到一个值域较小、可以方便比较的范围，并尽可能的减少冲突。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;常见hash的核心原理&quot;&gt;常见$Hash$的核心原理&lt;/h2&gt;

\[hash(i) = hash(i-1)*p + a(i)\]

&lt;p&gt;不过，如果仅仅是应用这个核心原理，那么出现&lt;em&gt;Hash冲突&lt;/em&gt;的概率还是较高的。&lt;/p&gt;

&lt;p&gt;于是，下面再介绍几种常见的&lt;em&gt;Hash&lt;/em&gt;方法，以尽可能减小&lt;em&gt;Hash冲突&lt;/em&gt;的几率。&lt;/p&gt;

&lt;h2 id=&quot;单哈希方法&quot;&gt;单哈希方法&lt;/h2&gt;
&lt;h3 id=&quot;自然溢出法&quot;&gt;自然溢出法&lt;/h3&gt;

\[hash(i) = hash(i-1)*p + a(i)\]

&lt;p&gt;相较核心原理没有较大的改变，但是在定义&lt;em&gt;Hash&lt;/em&gt;数组时，应采用&lt;em&gt;unsigned long long&lt;/em&gt;类型&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;unsigned long long&lt;/em&gt;为无符号位长整型，可以实现自然溢出，相当于其存储的数值自动对$2^{64}$取模&lt;/p&gt;
&lt;h3 id=&quot;通过取模优化&quot;&gt;通过取模优化&lt;/h3&gt;

\[hash(i) = [hash(i-1)*p + a(i)] \% mod\]

&lt;p&gt;只需在原来的基础上进行进行取模即可，不过$p$和$mod$的取值有些需要注意的地方。其中$p$和$mod$都应该取一个质数，$p$应该大于原字符串中字符的定义域，$mod$应尽量取较大的数。这样可以有效降低冲突的几率。&lt;/p&gt;

&lt;h2 id=&quot;双哈希方法&quot;&gt;双哈希方法&lt;/h2&gt;
&lt;p&gt;顾名思义，使用两重哈希（使用不同的单哈希方法，或者取不同的$p$和$mod$）。&lt;/p&gt;

&lt;p&gt;对于两个字符串$S,T$的哈希值，当且仅当如下条件成立时，我们认为两个字符串是相等的。&lt;/p&gt;

\[Hash_1(S) == Hash_1(T)\quad \&amp;amp;\&amp;amp; \quad Hash_2(S) == Hash_2(T)\]

&lt;p&gt;这样一来，&lt;em&gt;Hash冲突&lt;/em&gt;的几率又被大大降低。&lt;/p&gt;

&lt;h2 id=&quot;hash模板题&quot;&gt;$Hash$模板题&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3370&quot;&gt;P3370 【模板】字符串哈希 - 洛谷&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;示例代码&quot;&gt;示例代码&lt;/h3&gt;
&lt;h3 id=&quot;自然溢出&quot;&gt;&lt;em&gt;自然溢出&lt;/em&gt;&lt;/h3&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstring&amp;gt;
#define ull unsigned long long
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;212370440130137957ll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;131&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/12/25/hash/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/25/hash/</guid>
        
        <category>Hash</category>
        
        <category>字符串</category>
        
        
      </item>
    
      <item>
        <title>Hello, decoder24</title>
        <description>&lt;h2 id=&quot;hello-world&quot;&gt;Hello World!!&lt;/h2&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;200&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allow=&quot;autoplay&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1046529265&amp;amp;color=%23ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=fakse&amp;amp;show_user=false&amp;amp;show_reposts=false&amp;amp;show_teaser=true&amp;amp;visual=false&quot;&gt;&lt;/iframe&gt;
&lt;div style=&quot;font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;&quot;&gt;&lt;a href=&quot;https://soundcloud.com/chaycebeckham&quot; title=&quot;Chayce Beckham&quot; target=&quot;_blank&quot; style=&quot;color: #cccccc; text-decoration: none;&quot;&gt;Chayce Beckham&lt;/a&gt; · &lt;a href=&quot;https://soundcloud.com/chaycebeckham/23-1&quot; title=&quot;23&quot; target=&quot;_blank&quot; style=&quot;color: #cccccc; text-decoration: none;&quot;&gt;23&lt;/a&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 12 Dec 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/12/12/hello-2015/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/12/12/hello-2015/</guid>
        
        
      </item>
    
  </channel>
</rss>
